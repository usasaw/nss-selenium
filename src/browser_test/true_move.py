from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, TimeoutException, ElementNotInteractableException
from src.utils.seleniumUtils import search
from src.utils.screenshot import take_screenshot

import time
import asyncio
import io
import sys

# from src.utils.seleniumUtils import waitForElement
def send_log(socketio, sid, message):
    print(message)
    socketio.emit("test_result", message, to=sid)

def run_test(socketio, sid, CS_CODE):
    try:
        options = webdriver.ChromeOptions()
        options.add_argument("--force-device-scale-factor=0.45")  # scale 75%
        options.add_experimental_option('detach', True)
        driver = webdriver.Chrome(options=options)
        
        driver.get('https://nsscsposminiapp-dev.counterservice.co.th/sale/index.html#/miniapp')
        send_log(socketio, sid, "‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        driver.maximize_window()

        result = test_case_error(driver, socketio, sid, CS_CODE)
        if result == "Test passed! True Group Error":
            result = test_case_success(driver, socketio, sid, CS_CODE)

        send_log(socketio, sid, result)
    except Exception as e:
        send_log(socketio, sid, f"‚ùå Test failed: {e}")

def test_case_error(driver, socketio, sid, CS_CODE):
    try:
        send_log(socketio, sid, "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö True Group Error")
        time.sleep(5)
        send_log(socketio, sid, "‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        time.sleep(15)
        iframes = driver.find_elements(By.CSS_SELECTOR, 'iframe')
        send_log(socketio, sid, f"üìå ‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(iframes)} iframes")
        if len(iframes) < 2:
            raise ValueError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö iframe ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 2)")
        
        # ‡∏î‡∏∂‡∏á iframe ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
        iframe_onetouch = iframes[0]
        iframe_subpage = iframes[1]

        # ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á iframe ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
        driver.switch_to.frame(iframe_onetouch)
        send_log(socketio, sid, f"‚úÖ ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á iframe ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        time.sleep(5)
        buttons = driver.find_elements(By.CLASS_NAME,'main-card-container')

        if (len(buttons) < 3) :
            raise ValueError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å")
        send_log(socketio, sid, f"‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        buttons[2].click()

        # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á iframeSubPage
        driver.switch_to.default_content() # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å iframe ‡πÅ‡∏£‡∏Å
        driver.switch_to.frame(iframe_subpage) # ‡πÄ‡∏Ç‡πâ‡∏≤ iframe ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
        send_log(socketio, sid, f"‚úÖ ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á iframe ‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        nestedIframes = driver.find_elements(By.CSS_SELECTOR,'iframe')
        send_log(socketio, sid, f"üìå ‡∏û‡∏ö iframe ‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô: {len(nestedIframes)} iframe")

        if (len(nestedIframes) > 0) :
            driver.switch_to.frame(nestedIframes[0])
            send_log(socketio, sid, f"‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô nested iframe ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        time.sleep(10)

        send_log(socketio, sid, f"‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô nested iframe")
        # üîç ‡∏´‡∏≤ input field
        input_fields = driver.find_elements(By.CLASS_NAME,'text-field-input')
        if len(input_fields) < 0 :
            raise ValueError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö input field")
        send_log(socketio, sid, f"‚úÖ ‡∏û‡∏ö input field")
        take_screenshot(driver,"test_case_error",CS_CODE)

        time.sleep(5)
        actions = ActionChains(driver)
        actions.move_to_element(input_fields[0]).send_keys('123').perform()
        send_log(socketio, sid, f"‚úÖ ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤ 123 ‡πÉ‡∏ô input field - Ref1")
        take_screenshot(driver,"test_case_error",CS_CODE)

        time.sleep(2)
        actions.send_keys(Keys.ENTER).perform()
        send_log(socketio, sid, f"‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Enter ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        time.sleep(2)
        actions.move_to_element(input_fields[1]).send_keys('123').perform()
        send_log(socketio, sid, f"‚úÖ ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤ 123 ‡πÉ‡∏ô input field - Ref2")
        take_screenshot(driver,"test_case_error",CS_CODE)

        time.sleep(2)
        actions.send_keys(Keys.ENTER).perform()
        send_log(socketio, sid, f"‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Enter ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        time.sleep(10)
        message_element = WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".messageCode-alert"))
        )

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å element
        message_text = message_element.text
        send_log(socketio, sid, f"=>" + message_text)
        message_error = ["[ COUN90000 ]", "[ NSS999999 ]"]
        
        found = False
        for error in message_error:
            if error in message_text:
                send_log(socketio, sid, f"‚úÖ ‡∏û‡∏ö Error code: {error}")
                take_screenshot(driver,"test_case_error",CS_CODE)
                result = "Test passed! True Group Error"
                found = True
                break  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ error ‡∏ï‡∏±‡∏ß‡πÉ‡∏î‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏ô‡∏ï‡πà‡∏≠

        if not found:
            send_log(socketio, sid, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
            take_screenshot(driver,"test_case_error",CS_CODE)
            result = "Test failed! True Group Error"
            driver.quit()
        
        send_log(socketio, sid, result)
        return result
    except Exception as e:
        error_msg = f"Test failed: {e}"
        send_log(socketio, sid, error_msg)
        driver.quit()
        return error_msg

def test_case_success(driver, socketio, sid, CS_CODE):
    try:
        driver.refresh()
        time.sleep(5)
        send_log(socketio, sid, "\n")
        send_log(socketio, sid, f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö True Group Success")
        time.sleep(5)
        send_log(socketio, sid, f'‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
        iframes = driver.find_elements(By.CSS_SELECTOR, 'iframe')
        send_log(socketio, sid, f"üìå ‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(iframes)} iframes")

        if len(iframes) < 2:
            raise ValueError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö iframe ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 2)")
        
        # ‡∏î‡∏∂‡∏á iframe ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
        iframe_onetouch = iframes[0]
        iframe_subpage = iframes[1]

        # ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á iframe ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
        driver.switch_to.frame(iframe_onetouch)
        send_log(socketio, sid, f"‚úÖ ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á iframe ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        time.sleep(5)
        buttons = driver.find_elements(By.CLASS_NAME,'main-card-container')

        if (len(buttons) < 3) :
            raise ValueError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å")
        send_log(socketio, sid, f"‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        buttons[2].click()
        time.sleep(10)

        # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á iframeSubPage
        driver.switch_to.default_content() # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å iframe ‡πÅ‡∏£‡∏Å
        driver.switch_to.frame(iframe_subpage) # ‡πÄ‡∏Ç‡πâ‡∏≤ iframe ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
        send_log(socketio, sid, f"‚úÖ ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á iframe ‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        nestedIframes = driver.find_elements(By.CSS_SELECTOR,'iframe')
        send_log(socketio, sid, f"üìå ‡∏û‡∏ö iframe ‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô: {len(nestedIframes)} iframe")

        if (len(nestedIframes) > 0) :
            driver.switch_to.frame(nestedIframes[0])
            send_log(socketio, sid, f"‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô nested iframe ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        time.sleep(10)

        send_log(socketio, sid, f"‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô nested iframe")
        # üîç ‡∏´‡∏≤ input field
        input_fields = driver.find_elements(By.CLASS_NAME,'text-field-input')
        if len(input_fields) < 0 :
            raise ValueError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö input field")
        send_log(socketio, sid, f"‚úÖ ‡∏û‡∏ö input field")
        take_screenshot(driver,"test_case_success",CS_CODE)

        time.sleep(5)
        actions = ActionChains(driver)
        actions.move_to_element(input_fields[0]).send_keys('700072215').perform()
        send_log(socketio, sid, f"‚úÖ ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤ 700072215 ‡πÉ‡∏ô input field - Ref1")
        take_screenshot(driver,"test_case_success",CS_CODE)

        time.sleep(2)
        actions.send_keys(Keys.ENTER).perform()
        send_log(socketio, sid, f"‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Enter ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        time.sleep(2)
        actions.move_to_element(input_fields[1]).send_keys('700072215').perform()
        send_log(socketio, sid, f"‚úÖ ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤ 700072215 ‡πÉ‡∏ô input field - Ref2")
        take_screenshot(driver,"test_case_success",CS_CODE)

        time.sleep(2)
        actions.send_keys(Keys.ENTER).perform()
        send_log(socketio, sid, f"‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Enter ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        driver.switch_to.default_content()
        send_log(socketio, sid, f"üîÑ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà root page")

        newIframes = driver.find_elements(By.CSS_SELECTOR,'iframe')
        send_log(socketio, sid, f"üìå ‡∏û‡∏ö iframes : {len(newIframes)} iframe")

        # XPATH ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'
        xpath_selector = '//*[@id="headlessui-dialog-panel-:rl:"]/div/div[4]/div/button[1]'
        # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        edit_success = search(driver, newIframes, xpath_selector, 700, socketio=socketio, sid=sid, CS_CODE=CS_CODE)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if edit_success:
            send_log(socketio, sid, f"‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            send_log(socketio, sid, f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' ‡πÑ‡∏î‡πâ")
            driver.quit()
            return "Failed"

        driver.switch_to.frame(iframe_subpage) # ‡πÄ‡∏Ç‡πâ‡∏≤ iframe ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
        send_log(socketio, sid, f"‚úÖ ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á iframe ‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        time.sleep(2)
        # üîç ‡∏´‡∏≤ input field
        input_fields_price = driver.find_elements(By.CLASS_NAME,'text-field-price-card-input-box')
        if len(input_fields_price) < 0 :
            raise ValueError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö input field price")
        send_log(socketio, sid, f"‚úÖ ‡∏û‡∏ö input field price {len(input_fields_price)} input")

        # actions = ActionChains(driver)
        actions.move_to_element(input_fields_price[0]).send_keys('100').perform()
        send_log(socketio, sid, f"‚úÖ ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤ 100 ‡πÉ‡∏ô input field price")
        take_screenshot(driver,"test_case_success",CS_CODE)

        driver.switch_to.default_content()
        send_log(socketio, sid, f"üîÑ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà root page")

        newIframes = driver.find_elements(By.CSS_SELECTOR,'iframe')
        send_log(socketio, sid, f"üìå ‡∏û‡∏ö iframes : {len(newIframes)} iframe")

        xpath_confirm = '//*[@id="root"]/div/div/div/div/div[1]/div/div[20]/div[4]/div[2]/div/div/button'
        # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        edit_success = search(driver, newIframes, xpath_confirm, 700, socketio=socketio, sid=sid, CS_CODE=CS_CODE)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if edit_success:
            send_log(socketio, sid, f"‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            send_log(socketio, sid, f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' ‡πÑ‡∏î‡πâ")
            driver.quit()
            return "Failed"

        xpath_submit = '//*[@id="headlessui-dialog-panel-:ro:"]/div/div[4]/div/button[3]'
        # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        take_screenshot(driver,"test_case_success",CS_CODE)
        submit_success = search(driver, newIframes, xpath_submit, 700, socketio=socketio, sid=sid, CS_CODE=CS_CODE)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if submit_success:
            send_log(socketio, sid, f"‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            send_log(socketio, sid, f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' ‡πÑ‡∏î‡πâ")
            driver.quit()
            return "Failed"
            
        result = "Test passed! True Group Success"
        send_log(socketio, sid, result)
        driver.quit()
        return result
    except Exception as e:
        error_msg = f"Test failed: {e}"
        send_log(socketio, sid, error_msg)
        driver.quit()
        return error_msg
    
